CONFIGURE_FLAGS := --disable-jemalloc

ifeq (eabi,$(findstring eabi,$(TARGET)))

CC ?= $(TARGET)-gcc
CPP ?= $(TARGET)-gcc -E
CXX ?= $(TARGET)-g++
AR ?= $(TARGET)-ar

CONFIGURE_FLAGS += --target=$(TARGET) --without-intl-api

	ifeq (androideabi,$(findstring androideabi,$(TARGET)))
		CONFIGURE_FLAGS += \
			--with-android-ndk=$(ANDROID_NDK) \
			--with-android-toolchain=$(ANDROID_TOOLCHAIN) \
			$(NULL)
	endif
else

CC ?= gcc
CPP ?= gcc -E
CXX ?= g++
AR ?= ar

endif

ifneq (,$(CARGO_FEATURE_DEBUGMOZJS))
	CONFIGURE_FLAGS += --enable-debug=-g --enable-optimize=-O0
endif

ifeq (windows,$(findstring windows,$(TARGET)))
	# msys2 sets CC=cc as default. however, there is no `cc.exe`.
	# overwrite it here.
	ifeq ($(CC),cc)
		CC = gcc
		CPP = gcc -E
	endif
	# cargo uses Windows native path. msys2 make unfortunately doesn't understand it.
	OUT_DIR:=$(shell cygpath "$(OUT_DIR)")
	# on windows, SM requires moztools which contains prebuilt libraries like glib and libIDL.
	# we don't need them, so just set / -- configure will check that $(MOZ_TOOLS)/bin exists
	# and that it's in the path.
	MOZ_TOOLS=/
	FORCE_NATIVE_WIN32_PYTHON=1

	# we build with system nspr, expecting a msys2 mingw64 build
	# the mingw64 nspr-config gives -lplc4 for example, but only libplc4.dll.a and libplc4_s.a exist.
	#CONFIGURE_FLAGS += --with-system-nspr
	CONFIGURE_FLAGS += --with-nspr-cflags="-I/mingw64/include/nspr" --with-nspr-libs="-lplds4.dll -lplc4.dll -lnspr4.dll"
endif

SRC_DIR = $(shell pwd)

.PHONY : all
ifeq (1,$(FORCE_NATIVE_WIN32_PYTHON))
all:
	cd $(OUT_DIR) && \
	PYTHON="/c/python27/python.exe" \
	MOZ_TOOLS="$(MOZ_TOOLS)" CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" AR="$(AR)" \
	$(SRC_DIR)/mozjs/js/src/configure --enable-gczeal $(strip $(CONFIGURE_FLAGS))
	cd $(OUT_DIR) && make -f Makefile -j$(NUM_JOBS)
else
all:
	cd $(OUT_DIR) && \
	MOZ_TOOLS="$(MOZ_TOOLS)" CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" AR="$(AR)" \
	$(SRC_DIR)/mozjs/js/src/configure --enable-gczeal $(strip $(CONFIGURE_FLAGS))
	cd $(OUT_DIR) && make -f Makefile -j$(NUM_JOBS)
endif

