From 3f3e9f05ba01ddc5a1fb72e8f7eab7d2ee012163 Mon Sep 17 00:00:00 2001
From: Anthony Ramine <n.oxyde@gmail.com>
Date: Wed, 6 Apr 2016 10:52:19 +0200
Subject: Hide some callbacks that use RefPtr

---
 mozjs/js/src/jsapi.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/mozjs/js/src/jsapi.h b/mozjs/js/src/jsapi.h
index eb5b39e..19a5faa 100644
--- a/mozjs/js/src/jsapi.h
+++ b/mozjs/js/src/jsapi.h
@@ -6248,17 +6248,19 @@ struct PerformanceGroup {
 
   public:
     // Compatibility with RefPtr<>
     void AddRef();
     void Release();
     uint64_t refCount_;
 };
 
+#ifndef RUST_BINDGEN
 using PerformanceGroupVector = mozilla::Vector<RefPtr<js::PerformanceGroup>, 0, SystemAllocPolicy>;
+#endif
 
 /**
  * Commit any Performance Monitoring data.
  *
  * Until `FlushMonitoring` has been called, all PerformanceMonitoring data is invisible
  * to the outside world and can cancelled with a call to `ResetMonitoring`.
  */
 extern JS_PUBLIC_API(bool)
@@ -6299,27 +6301,29 @@ GetPerfMonitoringTestCpuRescheduling(JSContext*, uint64_t* stayed, uint64_t* mov
 
 /**
  * Add a number of microseconds to the time spent waiting on CPOWs
  * since process start.
  */
 extern JS_PUBLIC_API(void)
 AddCPOWPerformanceDelta(JSContext*, uint64_t delta);
 
+#ifndef RUST_BINDGEN
 typedef bool
 (*StopwatchStartCallback)(uint64_t, void*);
 extern JS_PUBLIC_API(bool)
 SetStopwatchStartCallback(JSContext*, StopwatchStartCallback, void*);
 
 typedef bool
 (*StopwatchCommitCallback)(uint64_t, PerformanceGroupVector&, void*);
 extern JS_PUBLIC_API(bool)
 SetStopwatchCommitCallback(JSContext*, StopwatchCommitCallback, void*);
 
 typedef bool
 (*GetGroupsCallback)(JSContext*, PerformanceGroupVector&, void*);
 extern JS_PUBLIC_API(bool)
 SetGetPerformanceGroupsCallback(JSContext*, GetGroupsCallback, void*);
+#endif
 
 } /* namespace js */
 
 
 #endif /* jsapi_h */
-- 
2.8.3

